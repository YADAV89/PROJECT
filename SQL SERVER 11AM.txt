Database :- 
 ---------------

  => a Database is a organized collection of interrelated data. For example 
       a bank db stores data relatedd to customers,accounts,transactions etc
       and a univ db stores data related to students,courses,faculty etc. 

 Types of Databases :- 
 ----------------------------

  1  OLTP DB  (online transaction processing)
  2  OLAP DB (online analytical processing)  /  DWH 

 => organizations uses OLTP for storing day-to-day transactions and OLAP 
      for analysis.

 => OLTP is for running business and OLAP for to analyze business.

 => day-to-day operations on db includes 

        C    create
        R    read
        U    update
        D    delete

 DBMS :- 
 -----------

 => DBMS stands for Database Management System and It is a software
      used to create and to manage database.

         USER----------------DBMS-----------------DB

 => DBMS is an interface between user and db.

 Evolution of DBMS :- 
 -----------------------------

	1960		fms   (file mgmt system)

	1970		hdbms (hierarchical dbms)
			ndbms (network dbms)

	1980		rdbms  (relational dbms)

	1990		ordbms (object relational dbms)

 
 RDBMS :- 
 --------------

  => RDBMS concepts are introduced by E.F.CODD (Edgar Frank CODD)
  => E.F.CODD introduced 12 rules called codd rules.
  => a db that supports all 12 rules called perfect rdbms
  
  Information Rule :- 
  --------------------------

  => according to information rule data must be organized in tables i.e. rows and
       columns 

   CUST
   CID    NAME     ADDR
   10      SACHIN  HYD
   11      RAHUL    DEL
   12      VIJAY       HYD

     DATABASE =  collection of tables 
     TABLE         =   collection of rows & cols
     ROW           =   collection of field values
     COLUMN     =    collection values belongs to one field

  => every table must contain primary key to uniquely identify the records 

        ex :-  accno,empid,aadharno,panno,voterid

 RDBMS features :- 
--------------------------

1  easy to access & manipulate data
2  less redundency (duplication of data)
3  more security      
4  gurantees data quality
5  supports data sharing
6  supports transactions 

RDBMS softwares :- 
----------------------------

 SQL SERVER                  from microsoft
 ORACLE                          from oracle
 MYSQL                            from oracle
 DB2                                  from ibm
 POSTGRESQL                from postgresql
 RDS                                 from amazon

 ORDBMS :- 
 ------------------

  => ordbms stands for object relational dbms 
  => it is a combination of  rdbms & oops 

             ordbms  =  rdbms  +  oops  (reusability) 

  => rdbms doesn't support reusability but ordbms supports reusability


 examples :- 

 SQL SERVER
 ORACLE
 POSTGRESQL 

 vehicle			dbms
 2 wheeler		rdbms
 honda activa		sql server 

 what is sql server ? 

  sql server is basically a rdbms product from microsoft and also supports
  ordbms features and used to create and to manage database.

 20-NOV-23 

 DB Development Life Cycle :- 
 ---------------------------------------

 Analysis
 Design
 Development
 Testing
 Implementation
 Maintenance

 Design :- 
 ------------

  => Designing  DB means designing tables
  => db is designed by db designers or architects by using

          1  ER Model  (Entity Relationship)
          2  Normalization 
 
 Development  :- 
 --------------------

 => DB is developed by Developers & DBAs (DB Admin)
 => DB is developed by using any rdbms tools like sql server,oracle,mysql etc.

                    Developer                                DBA

                   creating tables	                  installation of sql server			
                   creating views                          creating database
                   creating synonyms                   creating logins
                   creating sequences                  db backup & restore	      
                   creating indexes                       db export  & import 
                   creating procedures                 db upgradation & migration               
                   creating functions                     performance tuning                   
                   creating triggers
                   writing queries


       sql server 2014 ========> sql server 2022    db upgradation
      
       mysql ===============> sql server 2022     db migration 

 Testing :- 
 -------------

 => DB  is tested by  QA (Quality Assurance) team by using some tools like
      selenium.

 Implementation :- 
 -------------------------

  => implementation means copying db from dev environment to prod envrionment.
  => after copying db to prod server end user can use db for day-to-day opertions.
 
summary :- 

 what is db ?
 what is dbms ?
 what is rdbms ?
 what is ordbms ?
 what is db development life cycle ?

==========================================================================

21-NOV-23			SQL SERVER (MS-SQL)
				====================

  => sql server is a rdbms product  from microsoft and also supports ordbms features and
        used to create and to manage database.

 =>  sql server can be used for both development and administration

  versions of sql server :- 
  --------------------------------

  version                    	            year

  SQL SERVER 1.1              		 1991
  SQL SERVER 4.2               		1993
  SQL SERVER 6.0              		 1995
  SQL SERVER 6.5               		1996
  SQL SERVER 7.0               		1998
  SQL SERVER 2000            		 2000
  SQL SERVER 2005            		 2005
  SQL SERVER 2008           		  2008
  SQL SERVER 2012            		 2012
  SQL SERVER 2014            		 2014
  SQL SERVER 2016            		 2016   
  SQL SERVER 2017            		 2017
  SQL SERVER 2019            		 2019
  SQL SERVER 2022             		 2022

  CLIENT / SERVER Architecture :- 
  ----------------------------------------------
 
  1  SERVER
  2  CLIENT

 SERVER :- 
 ----------------

  => server is a system where sql server software is installed and running
  => inside the server  sql server manages 

      1  DB
      2  INSTANCE

 => DB is permanent storage and INSTANCE is temporary storage
 => DB is created in hard disk and INSTANCE is created in ram.
 
CLIENT :-
--------------

  => using client system users can 

  1 connects to server
  2 submit requests to server
  3 receives response from server

 client tool :- 
 ----------------

  SSMS  (SQL SERVER MANAGEMENT STUDIO)

 How to connect to sql server :- 
 -------------------------------------------

 => to connect to sql server open ssms and enter following  details 

      SERVER  TYPE		:-    DB Engine
      SERVER NAME		:-    DESKTOP-G2DM7GI
      AUTHENTICATION	:-    windows / sql server 
      LOGIN		:-    SA  (system admin)
      PASSWORD		:-    123

   USER----------SSMS--------------------------------------------SQL SERVER

 creating database in sql server :- 
 =========================

  => In object explorer select  Databases => New Database

       Enter Database Name   :-   DB11AM

 => click OK

 => a DB is created with following two files 

           1  DATA FILE (.MDF)   master data file
           2  LOG FILE   (.LDF)   log data file

 => Data file stores data and Log file stores operations (C,R,U,D)

         NAME         TYPE               SIZE           AUTOGROWTH             PATH
        DB11AM       DATA               8MB           64MB                      
        DB11AM       LOG                8MB           64MB 

   PATH :- C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA

                  DB11AM.MDF
                  DB11AM_LOG.LDF


      USER-----SSMS----------------------------------------------SQL SERVER-------DB11AM


   SQL  :- 
  ========

  => SQL stands for structured query language
  => a language used to communicate with sql server
  => user communicate with sql server to perform operations over db
  => user communicates with sql server by sending commands called queries.
  => a query is a command submitted to sql server to perform operation over db.
  => SQL is originally introduced by IBM and initial name of this language was "SEQUEL"
  => SQL is common to all relational databases 
 
       SQL SERVER       ORACLE        MYSQL        POSTGRESQL       RDS 
               SQL                  SQL               SQL                 SQL                     SQL 
    
   USER----SSMS----------------------SQL-------------------------SQL SERVER----------DB

  USER-----SQLPLUS----------------SQL---------------------------ORACLE----------------DB

 USER----MYSQL -----------------------SQL--------------------------MYSQL----------------DB       
               WORKBENCH

  => based on operations over db  SQL is categorized into following sublanguages 

         DDL  (DATA DEFINITION LANG)
         DML  (DATA MANIPULATION LANG)
         DQL  (DATA QUERY LANG)
         TCL   (TRANSACTION CONTROL LANG)
         DCL  (DATA CONTROL LANG)

 			 SQL

      DDL		DML	 DQL		TCL		 DCL

      create		insert	select		commit		grant
      alter		update			rollback		revoke
      drop		delete			save transaction
      truncate	merge


 DATA  & DATA DEFINITION :- 
 ------------------------------------------

  EMPID   ENAME    SAL      => DATA DEFINITION  / METADATA 
    1  	A	8000    => DATA

  22-NOV-23 

  Download & Install :- 
  ------------------------------

  1  SQL SERVER
  2  SSMS

 
 Download sql server :-   (download sql server 2019)
 -------------------------------

 https://www.microsoft.com/en-in/sql-server/sql-server-downloads

step-by-step installation :-  (step by step installation of sql server 2019)
-----------------------------------

https://www.c-sharpcorner.com/article/step-by-step-installation-of-microsoft-sql-server-on-windows-system/

Download SSMS :-   (download sql server management studio)
--------------------------

https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver16
 
     
Datatypes in SQL SERVER :- 
-----------------------------------------

  =>  a datatype specifies 

   1   type of the data allowed in field
   2   amount of memory allocated for field

 			        Datatypes 

            CHAR                                   Integer Types         Float                   currency         Dates          Binary

ASCII               UNICODE                tinyint                     number(p,s)        smallmoney    date           binary
                                                         smallint                  decimal(p,s)        money            time           varbinary
char                  nchar                       int                                                                             datetime    varbinary(max)
varchar             nvarchar                  bigint
varchar(max)    nvarchar(max)         Numeric

char(size) :-
----------------

  => allows character data upto 8000 chars
  => recommended for fixed length char fields

   ex :-       NAME      CHAR(10)

                 SACHIN-----
                                 wasted 

                 RAVI------
                             wasted 

  => in  CHAR  extra bytes are wasted , so char is not recommended for variable length fields
       and char is recommended for fixed length fields

         ex :-    GENDER     CHAR(1)

                     M
                     F

                    STATE_CODE     CHAR(2)

                    AP
                    TS

                    COUNTRY_CODE   CHAR(3)

                    IND
                    USA 

VARCHAR(size) :- 
---------------------------

  => allows character data upto 8000 chars
  => recommended for variable length fields 

   ex :-      NAME        VARCHAR(10)

                SACHIN----
                                released 

VARCHAR(max) :-
-------------------------

=> allows character data upto 2GB 

 ex :-   REVIEW    VARCHAR(MAX) 

NOTE :- 

 =>  CHAR/VARCHAR/VARCHAR(MAX)  allows ascii chars (256) that includes a-z,A-Z,0-9,
       special chars .

    ex  :-      PANNO     CHAR(10)
                  VEHNO     CHAR(10)
                  EMAILID    VARCHAR(30)

 NCHAR / NVARCHAR / NVARCHAR(MAX) :-    (  N  => National)
 ---------------------------------------------------------------

=>  allows unicode chars (65536)  that includes  chars of different languages 

  Integer Types :- 
  ----------------------

  => allows numbers without decimal part 

  
     TINYINT		1	0 TO 255
     SMALLINT		2              -32768 TO 32767
     INT			4    	-2^31 TO  2^31-1 (-2147483648 to 2147483647)          
     BIGINT		8             	 -2^63 TO  2^63-1 (-9,223,372,036,854,775,808 to 
                                                                                                  9,223,372,036,854,775,807)

     ex   :-      AGE      		TINYINT
                    EMPID		SMALLINT
                    
   Numeric(p) :- 
   -------------------

   =>  allows numbers upto 38 digits 

      ex  :-       EMPID      NUMERIC(4)

                     10
                     100
                     1000
                     10000   => NOT ALLOWED 

                     AADHARNO    NUMERIC(12)

                     MOBILE           NUMERIC(10)

                     ACCNO            NUMERIC(11)
       
24-nov-23 

 Numeric(p,s) /  Decimal(p,s)   :- 
 ----------------------------------------

 => allows  float  values i.e numbers with decimal 

    P   =>  precision  =>  total no of digits allowed
    S   =>  scale        =>  no of digits allowed after decimal 

     ex :-        SALARY    DECIMAL(7,2)

                    5000       
                    5000.55
                    50000.55
                    500000.55   => not allowed 

                    5000.567   => allowed  =>  5000.57
                    5000.563   => allowed  =>  5000.56

 
CURRENCY types :-
----------------------------

=> currency types are used for fields related to money 
=> sql server supports 2 currency types 

    SMALLMONEY       4 BYTES   -2,14,748.3648 to 2,14,748.3647
    MONEY                   8 BYTES  -922337203685477.5808 to 922337203685477.5807

  EX  :-   SALARY    SMALLMONEY
              BALANCE MONEY

 DATE & TIME :- 
 -------------------------

 DATE		=>   allows only date
 TIME		=>   allows only time
 DATETIME 	=>   allows both date & time 

=> default date formt in sql server is yyyy-mm-dd
=> default time format is hh:mi:ss

  ex :-      DOB          DATE

               2003-10-05

               LOGIN        TIME
       
               09:30:00

              TXNDT         DATETIME

              2023-11-24 10:00:00

Binary Types :- 
-----------------------

   => binary types are used for storing binary data that includes audio,video,images

 BINARY              	=> allows fixed length binary data upto 8000 bytes
 VARBINARY            => allows variable length binary data upto 8000 byts
 VARBINARY(MAX)  => allows variable length binary data upto 2GB

   ex  :-           photo     binary(8000)           => extra bytes are wasted
 
                      audio_clip    varbinary(8000)  => extra bytes are released

                      movie           varbinary(max)   => extra bytes are released 

CREATING TABLES IN SQL SERVER DB :- 
--------------------------------------------------------------

CREATE TABLE  <tabname>
(
    field1    datatype(size) ,
    field2    datatype(size),
   ----------------------------
)


Rules :- 
-----------

 1   tabname  should start with alphabet
 2   tabname should not contain spaces & special chars but allows  _    $    # 
 3   tabname can be upto 128 chars
 4   table can have 1024 fields
 5   no of rows unlimited 
 
          ex  :-   123emp       invalid
                     emp 123      invalid
                    emp*123      invalid
                    emp_123     valid

 Ex :- 

  create table with following structure ? 

   EMP
   EMPID  ENAME  JOB  SAL   HIREDATE    DNO

 CREATE TABLE EMP
 (
   EMPID    	TINYINT,
   ENAME   	VARCHAR(10),
   JOB         	VARCHAR(10),
   SAL          	SMALLMONEY,
   HIREDATE   	DATE,
   DNO             	TINYINT
 )

 => above command created table definition / structure / metadata  that includes columns,
      datatype and size 

SP_HELP  :-           (SP  => stored procedure)
------------------- 
 
  => command used to see the table structure

                SP_HELP  <tabname>

     ex :-    SP_HELP   EMP 

                 NAME                      DATATYPE                               SIZE

	EMPID		tinyint			1
	ENAME		varchar			10
	JOB		varchar			10
	SAL		smallmoney		4
	HIREDATE	date			3
	DNO		tinyint			1

 INSERTING DATA (ROW) INTO TABLE :- 
 ---------------------------------------------------------

 => "INSERT" command is used to create row in a table
 => a row consists of data 
 => using INSERT command we can insert

1      single row
2     multiple rows 

inserting single row :-
------------------------------

       INSERT INTO  <tabname>  VALUES(v1,v2,v3,--------) 

ex :-  
 
   INSERT INTO EMP VALUES(100,'sachin','clerk',5000,'2023-11-24',10)
   INSERT INTO EMP VALUES(101,'arvind','manager',8000,getdate(),20)
   
25-nov-23 

 Inserting multiple rows :- 
 ----------------------------------
 
 INSERT INTO EMP VALUES(102,'ravi','analyst',10000,'2020-05-09',30) ,
                                               (103,'kumar','manager',9000,'2019-03-20',20),
                                               (104,'vijay','clerk',4000,'2018-04-12',10)
                                             
inserting nulls :-
------------------------

  => a null means blank or empty 
  => it is not equal to 0 or space 
  => nulls can be inserted in two ways 

   method 1 :- 
   ----------------

    INSERT INTO EMP VALUES(105,'sindhu',NULL,NULL,getdate(),30)

  method 2 :- 
  -----------------

  INSERT INTO  EMP (EMPID,ENAME,HIREDATE,DNO)  VALUES(106,'chandu',getdate(),20)

  =>  remaining two fields job,sal filled with nulls 
 
  Operators in SQL SERVER :- 
  -----------------------------------------

  1   Arithmetic Operators   =>    +   -    *    /      % 

  2   Relational Operators   =>    >    >=    <    <=    =    <>  or   != 

  3   Logical Operators        =>   AND    OR    NOT  

  4   Special Operators        =>  BETWEEN
                                                  IN
                                                  LIKE
                                                  IS
                                                 ANY
                                                 ALL
                                                 EXISTS
                                                 PIVOT       
 
5   Set Operators               =>  UNION
                                                 UNION ALL
                                                 INTERSECT
                                                 EXCEPT

Displaying Data :- 
-------------------------

  => "SELECT" command is used to display data from table.
  => we can display all rows & all columns
  => we can display specific rows & specific columns
 
     syn :-    SELECT  COLUMNS / *    FROM    TABNAME  

                   SQL          =        ENGLISH 
               
                   QUERIES  =    SENTENCES

                   CLAUSES  =     WORDS


  =>  display  employee names and salaries  ? 

        SELECT  ENAME , SAL  FROM EMP 

 => display  employee names,jobs and hiredates ?

       SELECT  ENAME,JOB,HIREDATE FROM EMP 

 => display all the data from emp ?

      SELECT  * FROM  EMP  

          *  =>  all columns 

 WHERE clause :- 
 -------------------------

  =>  used to select specific row / rows from table based on a condition

        SELECT columns
        FROM tabname
        WHERE  condition 

  condition :- 
  ------------------

          COLNAME   OP   VALUE

   => OP must be any relational operator like  >  >=   <   <=   =    <> 
   => if  cond = true row is selected  
   => if cond = false row is not selected 
   
  => display employee details whose id = 103 ? 

       SELECT * FROM EMP WHERE EMPID = 103 
       
 => display employee details whose name = kumar ?

      SELECT * FROM EMP WHERE ENAME = 'kumar' 

 => employees earning more than 5000 ? 

      SELECT * FROM EMP WHERE SAL > 5000 

 => employees joined after 2020  ? 

     SELECT  *  FROM EMP WHERE  HIREDATE  > 2020  => ERROR

     SELECT  *  FROM EMP WHERE  HIREDATE  > '2020-12-31'

 =>  employees joined before 2020 ? 

     SELECT  *  FROM EMP WHERE  HIREDATE  < '2020-01-01'

=> employees not working as clerk ?

     SELECT * FROM EMP WHERE JOB <> 'clerk' 
 
27-nov-23

 compound condition :- 
 --------------------------------

  => multiple conditions combined with  AND / OR  operators called compound condition
 
       WHERE   COND1    AND    COND2         RESULT
 
	         T		  T	 	T	
	         T	 	  F		F 
                         F		  T		F		
	         F		   F		F	   

       WHERE   COND1   OR   COND2             RESULT
                           T                      T                       T
                           T                      F                       T
                           F                      T                       T
                           F                      F                       F
 

 => display employees whose name = vijay , ravi  ?

      SELECT * FROM EMP WHERE ENAME = 'vijay' OR ENAME = 'ravi' 

 => employees working as clerk,manager ? 

     SELECT * FROM EMP WHERE JOB='clerk' OR job='MANAGER' 

 => employees working as clerk  and earning more than 4000 ? 
   
      SELECT * FROM EMP WHERE JOB='clerk' AND sal > 4000

=> employees earning more than 5000 and less than 10000 ?

     SELECT * FROM EMP WHERE SAL > 5000  AND  SAL < 10000

=> employees joined in 2020 ? 

    SELECT * FROM EMP WHERE HIREDATE >= '2020-01-01'
                                                        AND
                                                        HIREDATE <= '2020-12-31'

=> employees working for dept 10,20 ?
     
     SELECT * FROM EMP WHERE DNO =10  OR DNO=20

=> employees working for dept 10,20 and earning more than 4000 ? 

    SELECT *
    FROM EMP
   WHERE  DNO = 10 
                  OR
                  DNO = 20
                  AND
                  SAL>4000

 => above query returns employees belongs to 10th dept earning 4000 because
      sal > 4000 is applied only to 20th dept but not to 10th dept because
      operator AND has more priority than operator OR. To control this use (  )

       SELECT *
       FROM EMP
      WHERE (
                     DNO = 10 
                     OR
                     DNO = 20 
                     )
                     AND
                     SAL>4000

=> 
 
 STUDENT
 SID	SNAME	S1	S2	S3
1	A	80	90	70
2	B	30	60	50


 CREATE TABLE STUDENT
 (
  SID INT,
  SNAME VARCHAR(10),
  S1   TINYINT,S2 TINYINT,S3 TINYINT 
  )

  INSERT INTO STUDENT VALUES(100,'A',80,90,70)
  INSERT INTO STUDENT VALUES(101,'B',30,60,50)

=> list of students who are passed ?
 
  SELECT *
  FROM STUDENT
  WHERE  S1>=35   AND     S2>=35    AND      S3>=35 

=> list of students who are failed ? 

      SELECT *
      FROM STUDENT
      WHERE  S1<35    OR  S2<35    OR     S3<35 

 IN operator :- 
 --------------------

  =>  use IN operator for  " = "  comparision with multiple values. 
  =>  use IN operator for list comparision

           list   =>  10,20,30 
           list   =>  'vijay','kumar','ravi' 

           WHERE  COLNAME  =  V1,V2,V3,---       =>  INVALID

           WHERE  COLNAME  IN (V1,V2,V3,---)    => VALID

  => employees whose name = vijay,ravi,kumar  ?

       SELECT * FROM EMP WHERE ENAME  IN ('vijay','kumar','ravi') 

 => employees working as clerk,manager ?

      SELECT * FROM EMP WHERE JOB IN ('clerk','manager') 

 => employees not working for dept 10,20 ?

    SELECT * FROM EMP WHERE DNO NOT IN (10,20)

28-NOV-23 

 BETWEEN operator :- 
 ------------------------------

  => use BETWEEN operator for range comparision

       WHERE COLNAME BETWEEN V1 AND V2    (COL>=V1 AND COL<=V2)

  => employees earning between 5000 and 10000 ?

      SELECT * FROM EMP WHERE SAL BETWEEN 5000 AND 10000

  => employees joined in 2020 year ? 

     SELECT *
     FROM EMP 
     WHERE HIREDATE BETWEEN '2020-01-01' AND '2020-12-31' 

 => not joined in 2020 ? 

     SELECT *
     FROM EMP 
     WHERE HIREDATE NOT BETWEEN '2020-01-01' AND '2020-12-31' 

=> employees working as clerk,manager and earning between 5000 and 10000
     and not joined in 2020 and working for dno 10,20 ?

    SELECT *
    FROM EMP
    WHERE JOB IN ('clerk','manager')
                   AND
                  SAL BETWEEN 5000 AND 10000
                  AND
                  HIREDATE NOT BETWEEN '2020-01-01' AND '2020-12-31'
                  AND
                  DNO IN (10,20)

=> list of samsung,realme,oneplus mobile phones price between 10000 and 20000 ?

 products
 prodid  pname   price  category   brand
 
 SELECT *
 FROM products  
 WHERE brand IN ('samsung','realme','oneplus')
               AND
               price BETWEEN 10000 AND 20000
               AND
               category='mobiles'


 LIKE operator :- 
 ---------------------

  =>  use LIKE operator for pattern comparision 

   ex :-   name starts with 's'
             emailid ends with '.in' 
             string contains digits 

            WHERE   COLNAME   LIKE   'PATTERN'
     
 => pattern contins alphabets,digits,special chars and wildcard chars 
  
   wildcard chars :- 
   -----------------------

            %       =>    0  or many chars 

            _        =>    exactly 1 char
 

   => display employees name starts with 's' ?

        SELECT * FROM EMP WHERE ENAME LIKE  's%' 

  => employees name ends with 'd' ? 

       SELECT * FROM  EMP WHERE ENAME LIKE '%d' 

  => employees name contains 'a' ?

      SELECT * FROM EMP WHERE ENAME LIKE  '%a%' 

  => employees where 'a' is the 4th char in their name ?

      SELECT * FROM EMP WHERE ENAME LIKE  '___a%' 

 => where 'a' is the 2nd char from last ?

     SELECT * FROM EMP WHERE ENAME LIKE  '%a_'

=> name contains 4 chars ? 

   SELECT * FROM EMP WHERE ENAME LIKE  '____' 

=> employees joined in april month ?    YYYY-MM-DD

   SELECT * FROM EMP WHERE HIREDATE LIKE '_____04___' 
 
=> employees joined in 2020 year ? 

    SELECT * FROM EMP WHERE HIREDATE  LIKE '2020%' 

=> employees name starts with 'a','k','s'  ? 

     SELECT * 
     FROM EMP 
     WHERE ENAME  LIKE  '[aks]%' 

=> name starts between 'a' and 'p'  ?

     SELECT * 
     FROM EMP 
     WHERE ENAME  LIKE  '[a-p]%' 

Question :- 

  SELECT *
  FROM EMP
  WHERE JOB IN ('clerk','man%') 

 A  ERROR
 B  returns clerk,manager
 C  returns only clerk
 D  none 

  ANS :-  c 

 SELECT *
 FROM EMP
 WHERE JOB='clerk'  OR   job  LIKE  'man%' 

ans :-  b

SELECT *
FROM EMP
WHERE SAL BETWEEN 10000 AND 5000

a  ERROR
b  returns rows
c  returns no rows
d  none

 ans :-   c


 WHERE SAL BETWEEN 5000 AND 10000  (SAL>=5000 AND SAL<=10000)

 WHERE SAL BETWEEN 10000 AND 5000 (SAL>=100000 AND SAL<=5000)

 note :- use BETWEEN with lower and upper but not with upper and lower

IS operator :- 
------------------

 => use IS operator for  NULL comparision.

        WHERE COLNAME IS NULL
        WHERE COLNAME IS NOT NULL

 => employees not earning salary ? 

     SELECT *
     FROM EMP
     WHERE  SAL IS NULL 

=> employees earning salary ? 

     SELECT *
     FROM EMP
     WHERE  SAL IS NOT NULL 

 summary :- 

  WHERE COL IN (V1,V2,V3,--)
  WHERE COL BETWEEN V1 AND V2
  WHERE COL LIKE 'PATTERN'
  WHERE COL IS NULL 

29-nov-23

 ORDER BY clause :- 
 ----------------------------

  => order by clause is used to sort table data based on one or more columns
  => using order by we can sort either in ascending or in descending order
  => default order is ascending

   SELECT columns
   FROM tabname
   [WHERE cond]
   ORDER BY  colname ASC / DESC 

  
=> arrange employee list name wise asc order ? 

   SELECT *
   FROM EMP 
   ORDER BY  ENAME ASC  
 
 => arrange employee list sal wise desc order ? 

  SELECT *
  FROM EMP 
  ORDER BY SAL DESC 

=> arrange employee list hiredate wise asc ? 

   SELECT *
   FROM EMP 
  ORDER BY HIREDATE ASC 

=> display employees joined in 1981 and arrange output sal wise desc ?

    SELECT  *
    FROM EMP
    WHERE HIREDATE  LIKE  '1981%' 
    ORDER BY SAL DESC 
    
=> arrange employee list dept wise and with in dept sal wise desc ? 

     SELECT EMPNO,ENAME,SAL,DEPTNO
     FROM EMP 
     ORDER BY DEPTNO ASC, SAL DESC 

      1  A   3000  30			2 B   5000  10	
      2 B   5000  10			6 F   3000  10
      3 C   4000  20  ===========>	5 E   5000  20
      4 D   6000  30			3 C   4000  20 
      5 E   5000  20			4 D   6000  30
      6 F   3000  10			1  A   3000  30

   => arrange employee list dept wise and with in dept hiredate wise asc ? 

     SELECT EMPNO,ENAME,HIREDATE,DEPTNO
     FROM EMP 
     ORDER BY DEPTNO ASC, HIREDATE ASC
 
 => arrange student list avg wise desc , m desc,p desc ? 
     
  STUDENT
  SNO  SNAME  M    P     C
  1       A             80   90    70
  2       B            60   70    50
  3        C           90   80    70 
  4       D            90   70    80 

 SELECT * , (M+P+C)/ 3 AS AVG 
 FROM STUDENT
 ORDER BY  (M+P+C)/3  DESC , M DESC , P DESC 

   3        C            90   80    70 	80
   4        D            90   70    80 	80
   1        A             80   90    70 	80
   2        B            60   70    50	60
   
 ALIAS :- 
 --------------

  => alias means another name
 =>  used to change column heading
 
          COLNAME/EXPR  [AS]  ALIAS

 => display  employee names and annual salaries ? 

     SELECT  ENAME,SAL*12 AS ANNSAL
     FROM EMP 

     SELECT  ENAME,SAL*12 AS [ANNUAL SAL]
     FROM EMP 

 => display  ENAME  SAL   HRA    DA    TAX   TOTSAL   ? 

        HRA =  house rent allowance  =  20% ON SAL
        DA    =  dearness allowance   =  30% ON SAL
        TAX  = 10% ON SAL
        TOTSAL = SAL + HRA + DA - TAX 

      SELECT ENAME,SAL,
                     SAL*0.2 AS HRA,
                     SAL*0.3 AS DA,
                     SAL*0.1 AS TAX,
                     SAL + (SAL*0.2) + (SAL*0.3)  - (SAL*0.1) AS TOTSAL
     FROM EMP 

 
    SMITH	 800	160	240	80	1120	

 DISTINCT :- 
 -------------------

 => distinct eliminates duplicates. 
 
       SELECT  DISTINCT  col1
       SELECT  DISTINCT  col1,col2
       SELECT  DISTINCT * 

  EX :- 

    SELECT DISTINCT JOB FROM EMP 

    ANALYST
    CLERK
    MANAGER
    PRESIDENT
    SALESMAN

   SELECT DISTINCT DEPTNO FROM EMP 

   10
   20
   30

 TOP clause :- 
 -----------------

  => used to select top N rows 
 
    SELECT  TOP  <N>   colnames / * 
    FROM TABNAME
    [WHERE COND]
    [ORDER BY ] 

 EX :- 

  =>  display  TOP 5 rows from emp table ? 

       SELECT  TOP 5 *  
       FROM EMP 

 => display top 5 employees based on sal  or
      top 5 highest paid employees ? 

      SELECT TOP 5 * 
      FROM EMP 
      ORDER BY SAL DESC 

 => display top 5 employees based on experience ?

       SELECT  TOP 5 * 
      FROM EMP 
      ORDER BY  HIREDATE ASC 

  => top 3 max salaries ? 

     SELECT  DISTINCT TOP 3  SAL 
     FROM EMP 
    ORDER BY SAL DESC 

 summary :- 
 -----------------

  WHERE               =>  data filterting
  ORDER BY          =>  data sorting
  DISTINCT            =>  eliminating duplicates
  TOP                     =>  to find top n rows 

01-dec-23 

 DML commands :-    (Data Manipulation Lang)
 -----------------------

 1 INSERT
 2 UPDATE
 3 DELETE
 4 MERGE 

 => all DML commands acts on table data.
 => all DML commands are auto committed (saved).
 => to stop auto commit execute the following command

          SET IMPLICIT_TRANSACTIONS ON 

 => to save the operation execute COMMIT.
 => to cancel the operation execute ROLLBACK.

 UPDATE command :- 
 ------------------------------

  => command used to modify table data.
  => we can update all rows or specific rows
  => we can update single column or multiple columns 

  UPDATE <tabname>
  SET colname = value ,  colname = value , --------------
  [WHERE cond] 

  => update all employees comm with 500 ? 

      UPDATE EMP SET COMM = 500      

 => update employee comm with 500 whose comm = null ? 

     UPDATE EMP SET COMM = 500 WHERE COMM IS NULL 

 => update employee sal with 2000 and comm with 500 whose job=clerk ? 

      UPDATE EMP
      SET SAL = 2000  , COMM = 500
      WHERE JOB='clerk' 

 => increment sal by 20% and comm by 10% those working as salesman
      and joined in 1981 year ? 	

     UPDATE EMP 
     SET SAL  = SAL + (SAL*0.2) ,  COMM = COMM + (COMM*0.1)
     WHERE JOB='salesman'
                    AND
                    HIREDATE LIKE  '1981%' 

  => increase  samsung,redmi,realme mobiles phones price by 10% ?

  PRODUCTS
  prodid  pname  price  category  brand         

    UPDATE PRODUCTS
    SET PRICE = PRICE + (PRICE*0.1)
    WHERE BRAND IN ('samsung','redmi','realme')
                   AND
                  CATEGORY = 'mobiles' 

  => transfer all employees from 10th dept to 30th dept ? 

      UPDATE EMP 
      SET DNO = 30
      WHERE DNO = 10 

DELETE command :- 
-----------------------------

  => command used to delete row/rows from table
   
         DELETE FROM <tabname>  [WHERE cond] 

 =>  delete employees whose id = 7369,7844,7566 ? 

       DELETE FROM EMP WHERE EMPNO  IN (7369,7844,7566) 

 => delete employees joined in 2nd qurater of 1981 year ?

     DELETE 
    FROM EMP 
    WHERE HIREDATE BETWEEN '1981-04-01'   AND  '1981-06-30' 
 
 
DDL commands :-      (Data Definition Lang)
---------------------------

 CREATE
 ALTER
 DROP
 TRUNCATE

 => all DDL commands acts on table structure (columns,datatype and size)
 => all DDL commands are auto committed
 => to stop auto commit execute  
 
     SET IMPLICIT_TRANSACTIONS ON 

=> to save the operation execute COMMIT.
=> to cancel the operation execute ROLLBACK.

 ALTER command :- 
 --------------------------

  => command used to modify table structure
  => using alter we can 

   1  add columns
   2  drop columns
   3  modify a column 
               changing datatype
               changing size

  Adding columns :- 
  -------------------------

   ALTER TABLE <tabname>
         ADD   COLNAME DATATYPE(SIZE) ,  COLNAME DATATYPE(SIZE), ----

 => add column gender to emp table ? 

     ALTER TABLE EMP
            ADD GENDER   CHAR(1)

   after adding by default the new column is filled with nulls , to insert data into the new column
   use update command.

   UPDATE EMP 
   SET GENDER = 'M'
   WHERE EMPNO = 7369 

 Droping columns :- 
 -----------------------------

    ALTER TABLE <TABNAME>
          DROP   COLUMN  COL1,COL2,-------------- 

 EX :- 

  => drop column gender from emp ? 

     ALTER TABLE EMP
           DROP  COLUMN GENDER 

 Modifying a column :- 
 -----------------------------

  1 changing datatype
  2 changing size 

   ALTER TABLE <TABNAME>
          ALTER COLUMN  COLNAME DATATYPE(SIZE) 

Ex :- 

 => increase the size of ename to 20 ? 

    ALTER TABLE EMP
          ALTER COLUMN ENAME VARCHAR(20) 

=> change sal column datatype to money ? 

    ALTER TABLE EMP
         ALTER COLUMN SAL MONEY 

 02-dec-23 

 DROP command :- 
-----------------------------
 
 => command used to drop table from db 

   syn :-  DROP TABLE  <TABNAME> 

   Ex :-   DROP TABLE EMP 

TRUNCATE command :- 
-----------------------------------

  => deletes all the data from table but keeps structure
  => will empty the table
  => will release memory allocated for table

   syn :-  TRUNCATE TABLE  <tabname>

   ex  :-  TRUNCATE TABLE student 

   
 DELETE VS TRUNCATE :- 
 -------------------------------------

          DELETE                                                       TRUNCATE

 1     DML command                                               DDL  command
 
 2     can delete all rows and                                 can delete only all rows
        specific rows                                                 cannot delete specific rows

 3    where cond can be used                               where cond cannot be
       with delete                                                      used with truncate

 4    deletes row-by-row		           deletes all rows at a time 

 5    slower			           faster

 6    will not release memory                                releases memory 
 
 7   will not reset identity		         will reset identity 

  SP_RENAME :-   (SP => stored procedure)
  ----------------------

  => command used to change name of the table and name of the column 
 
            SP_RENAME    ' old name '  ,  'new name' 

     ex :- 

    => rename table student to stud  ? 

        SP_RENAME  'STUDENT','STUD' 

  => rename column M to MATHS ?

        SP_RENAME  'STUD.M','MATHS'
 
 IDENTITY :- 
 -----------------

   => used to generate sequence numbers 
   => used to auto increment column values 

    syn :-  IDENTITY(SEED,INCR) 
 
     SEED   => start
                      optional
                      default 1 

    INCR   =>  increment
                      optional
                      default 1 

 EX :- 

    CREATE TABLE CUST
     (
        CID    INT   IDENTITY(100,1) ,
        CNAME  VARCHAR(10)
    )

    INSERT INTO CUST (CNAME)  VALUES('A')
    INSERT INTO CUST (CNAME)  VALUES('B')
    INSERT INTO CUST (CNAME)  VALUES('C')

   SELECT  * FROM CUST

    CID	CNAME
   100	A
   101	B
   102	C

  INSERT INTO CUST VALUES(200,'D')   => ERROR => explicit value not allowed into
                                                                                           identity column 

 How to insert explicit value into identity column :- 
 -----------------------------------------------------------------------

    SET IDENTITY_INSERT CUST ON 

    INSERT INTO CUST(CID,CNAME) VALUES(200,'D')

   SELECT * FROM CUST 

   CID	CNAME
   100	A
   101	B
   102	C
   200       D

  => difference between delete & truncate when identity is considered ?

       delete will not reset identity     but  truncate will reset identity 

 DELETE :- 
 ----------------

      SELECT * FROM CUST

      CID  CNAME
      100   A
      101  B  
      102  C

       DELETE FROM CUST 

       INSERT INTO CUST(CNAME) VALUES('K') 

      SELECT  * FROM CUST 

      CID   CNAME
      103    K

  TRUNCATE :- 
   ------------------

    SELECT * FROM CUST

      CID  CNAME
      100   A
      101  B  
      102  C

      TRUNCATE TABLE CUST 

       INSERT INTO CUST(CNAME) VALUES('K') 

      SELECT  * FROM CUST 

      CID   CNAME
      100    K

   Built-in Functions in SQL SERVER :- 
  ----------------------------------------------------

    => a function accepts some input performs some calculation and returns one value

    Types of functions :- 
    ----------------------------

    1   DATE
    2   CHARACTER
    3   NUMERIC
    4   CONVERSION
    5   SPECIAL
    6   ANALYTICAL
    7   AGGREGATE

 DATE functions :- 
 -------------------------

 1  GETDATE() :- 
     --------------------

    => returns current date,time and also milliseconds

     SELECT GETDATE()   =>    2023-12-02 12:37:20.490
                                                  ---------------- -----------  ------
                                                     DATE       TIME        MS

 2  DATEPART() :- 
     ----------------------

    =>  used to get part of the date

                DATEPART(interval,date)

ex :- 

      SELECT  DATEPART(YY,GETDATE())    =>   2023
                                          MM                       =>   12
                                          DD                       =>   02
                                          DW                      =>   07 (1-7)
                                          DY                       =>   336 (1-365)
                                          HH                      =>    11
                                          MI                       =>    18
                                          SS                      =>    20
                                          QQ                     =>    4 (1-4)
 
                                                                               JAN-MAR   1
                                                                               APR-JUN    2
                                                                               JUL-SEP    3
                                                                               OCT-DEC   4
  

 => display employees joined in 1980,1983,1985 ?

    SELECT *
    FROM EMP 
   WHERE  DATEPART(YY,HIREDATE)  IN (1980,1983,1985)

 => employees joined in leap year ? 

   SELECT *
   FROM EMP
   WHERE DATEPART(YY,HIREDATE) % 4 = 0

 => employees joined in jan,apr,dec months ?

   SELECT *
   FROM EMP 
   WHERE DATEPART(MM,HIREDATE) IN (1,4,12) 

=> employees joined on saturday and sunday ?

    SELECT *
    FROM EMP 
    WHERE DATEPART(DW,GETDATE()) IN (1,7)

 => employees joined in 2nd quarter of 1981 year ?

    SELECT *
    FROM EMP 
    WHERE  DATEPART(YY,HIREDATE) = 1981
                    AND
                   DATEPART(QQ,HIREDATE) = 2 

 DATENAME() :- 
 ------------------------

   => similar to datepart used to extract part of the date.

		 MM		DW
     
 DATEPART	12		1


 DATENAME	December		Sunday

=> display  ENAME    DAY OF THE WEEK  ?

     SELECT  ENAME , DATENAME(DW,HIREDATE) AS DAY
     FROM EMP 

 => write a query to display on which day india got independence ?

      SELECT DATENAME(DW,'1947-08-15')   => Friday 

 DATEDIFF() :- 
 -------------------

  =>  used to calculate difference between two dates in given interval

             DATEDIFF(interval,start date,end date)

    SELECT DATEDIFF(YY,'2022-12-03',GETDATE())     => 1
    SELECT DATEDIFF(MM,'2022-12-03',GETDATE())   => 12
    SELECT DATEDIFF(DD,'2022-12-03',GETDATE())    => 365 

 => display  ENAME    EXPERIENCE  in years ?

     SELECT ENAME,DATEDIFF(YY,HIREDATE,GETDATE()) AS EXPR
     FROM EMP 

 => display  ENAME   EXPERIENCE   ?
                                   M YEARS N MONTHS 

       EXPERIENCE = 40 MONTHS =  3 YEARS 4 MONTHS 

      YEARS  =   MONTHS/12 = 40/12 =  3 

      MONTHS = MONTHS%12 = 40%12 = 4 

     SELECT ENAME,
                   DATEDIFF(MM,HIREDATE,GETDATE())/12 AS YEARS,
                   DATEDIFF(MM,HIREDATE,GETDATE())%12 AS MONTHS
     FROM EMP 

   FORMAT() :- 
   -----------------

    => used to display date in different formats 
 
              FORMAT(date,'format')

   SELECT FORMAT(getdate(),'dd.MM.yyyy')  => 03.12.2023
   SELECT FORMAT(getdate(),'MM/dd/yyyy hh:mm:ss') => 12/03/2023 12:06:47

     MM  => month
     mm  =>  minutes
 scenario :- 

 INSERT INTO EMP(EMPNO,ENAME,JOB,SAL,HIREDATE)
            VALUES(999,'ABC','CLERK',5000,GETDATE()) 

=> list of employees joine today ?

   SELECT *
   FROM EMP 
   WHERE  HIREDATE  = GETDATE()   => no rows 
                   
                  2023-12-03  =  2023-12-03 12:11:26.980

   SELECT *
   FROM EMP 
   WHERE  HIREDATE  =  FORMAT(GETDATE()  ,'yyyy-MM-dd') 

  DATEADD() :- 
  ------------------

   => used to add / subtract  days/years/months to / from a date 

            DATEADD(interva,int,date)

    SELECT DATEADD(DD,10,GETDATE())   =>   2023-12-13 
    SELECT DATEADD(MM,2,GETDATE())    =>   2024-02-03
    SELECT DATEADD(MM,-2,GETDATE())   =>   2023-10-03 
    
scenario :- 

  GOLD_RATES
  DATEID	       RATE 
  2020-01-01   ?
  2020-01-02   ?

  2023-12-03  ? 

 1 display today's gold rate ?
 2 display yesterday's gold rate ?
 3 display last month same day gold rate ?
 4 display last year same day gold rate ? 
          
SELECT *
FROM GOLD_RATES
WHERE  DATEID  =  FORMAT(GETDATE(),'yyyy-MM-dd') 


SELECT *
FROM GOLD_RATES
WHERE  DATEID  =  FORMAT(DATEADD(DD,-1,GETDATE()),'yyyy-MM-dd')

SELECT *
FROM GOLD_RATES
WHERE  DATEID  =  FORMAT(DATEADD(MM,-1,GETDATE()),'yyyy-MM-dd')

SELECT *
FROM GOLD_RATES
WHERE  DATEID  =  FORMAT(DATEADD(YY,-1,GETDATE()),'yyyy-MM-dd')
 
04-dec-23 

 YEAR() :- 
 --------------

   => returns only year part 

             YEAR(date)

  SELECT YEAR(GETDATE())    => 2023

MONTH() :- 
--------------

   => returns month from date

            MONTH(date) 

  SELECT MONTH(GETDATE())   =>   12


DAY() :- 
-----------
 
  => returns day from date

             DAY(getdate()) 

  SELECT DAY(GETDATE())   =>  04 
  
EOMONTH() :- 
----------------------

  => returns last day of the month 
          
               EOMONTH(DATE,INT)

   SELECT EOMONTH(GETDATE(),0)   => 2023-12-31

   SELECT EOMONTH(GETDATE(),1)   => 2024-01-31

    SELECT EOMONTH(GETDATE(),-1)   => 2023-11-30

 
 =========================================================================

 CHARACTER functions :- 
 -------------------------------------

  UPPER() :- 
  ---------------

  => converts string to uppercase

           UPPER(string/colname)

    SELECT UPPER('hello')       =>   HELLO

 
 LOWER() :- 
 ---------------

  => converts string to lowercase 

               LOWER(string/colname) 

    SELECT LOWER('HELLO')   => hello 

 => Display  EMPNO  ENAME  SAL  ?  display names in lowercase ? 

      SELECT EMPNO,LOWER(ENAME) AS ENAME,SAL FROM EMP 

 => convert names to lowercase in table ? 

     UPDATE EMP SET ENAME = LOWER(ENAME) 

  LEN() :- 
  -----------

   => returns string length i.e. no of chars 

         LEN(string/colname)

    SELECT LEN('hello welcome')   =>  13 

  => display employees name contains 5 chars ? 

       WHERE ENAME LIKE '_____' 

      SELECT * FROM EMP WHERE  LEN(ENAME) = 5 

 LEFT() :- 
 ------------

   => returns characters from left side 

         LEFT(string,no of chars) 

     SELECT LEFT('HELLO WELCOME',5)    =>  HELLO

=> employees name starts with 'S' ?

      WHERE ENAME LIKE 'S%' 

     SELECT  *  FROM EMP WHERE LEFT(ENAME,1) = 's' 

 RIGHT() :- 
 ---------------

  => returns characters starting from right side

      RIGHT(string,no of chars) 

  SELECT RIGHT('HELLO WELCOME',7)     =>     WELCOME

=> employees name ends with 's' ? 

     SELECT * FROM EMP WHERE RIGHT(ENAME,1) = 's' 
 
=> employees name starts and ends with same char ? 

     WHERE ENAME  LIKE  'a%a'
                    OR
                    ENAME LIKE 'b%b'
                   OR
                   ENAME LIKE 'c%c'  

   SELECT * FROM EMP WHERE LEFT(ENAME,1)  = RIGHT(ENAME,1) 

scenario :- 

  => generate  emailids for employees ? 

      EMPNO        ENAME            EMAILID
       7369            smith                smi736@tcs.com
       7499            allen                 all749@tcs.com

          +    => string concatenation 

        'a'  + 'b'    =>   ab
     
      SELECT EMPNO,ENAME,
                     LEFT(ENAME,3) + LEFT(EMPNO,3) + '@tcs.com'  AS EMAILID
      FROM EMP 

     => store emailids in db ?

      step 1 :-  add emailid column to emp table

       ALTER TABLE EMP
             ADD EMAILID VARCHAR(30)      

   step 2 :-  update the column with emailids 

     UPDATE EMP 
     SET EMAILID = LEFT(ENAME,3) + LEFT(EMPNO,3) + '@tcs.com'
     
SUBSTRING() :- 
----------------------

   =>  used to extract part of the string starting from specific position

           SUBSTRING(string,start,no of chars) 

 1     SELECT SUBSTRING('HELLO WELCOME',10,3)     =>   COM

 2      SELECT SUBSTRING('HELLO WELCOME',7,4)     =>   WELC

 REPLICATE() :- 
 -----------------------

  => repeats character for given no of times 

      REPLICATE(char,length)

   SELECT REPLICATE('*',5)     =>    *****
 
  => display  ENAME  SAL   ?
                                   ******
                                   *******
  
      SELECT  ENAME,REPLICATE('*',LEN(SAL)) AS SAL FROM EMP 

  scenario :- 

  ACCOUNTS
  ACCNO     	BAL 
 12345678962	100000

  your a/c no XXXX8962 debited ---- ? 

   REPLICATE('X',4) + RIGHT(ACCNO,4) 

 REPLACE() :- 
 ------------------

  => used to replace one string with another string 

        REPLACE(str1,str2,str3) 

  => in str1 , str2 replaced with str3 

   SELECT REPLACE('HELLO','ELL','ABC')     =>    HABCO
   SELECT REPLACE('HELLO','L','ABC')         =>     HEABCABCO
   SELECT REPLACE('HELLO','ELO','ABC')   =>      HELLO 

   SELECT REPLACE( '@@HE@@LL@@O@@','@','') => HELLO

 => employees  name contains exactly 2 'a'   ? 

       adams

     LENGTH(ename)   =    5

     LENGTH(REPLACE(ename,'a','')) =  3 

    SELECT *
    FROM EMP
   WHERE LEN(ENAME)  -  LEN(REPLACE(ENAME,'a','')) = 2 
 
05-dec-23

 TRANSLATE() :- 
 ---------------------

  => used to translate one char to another char 

                 TRANSLATE(str1,str2,str3) 

  SELECT TRANSLATE('hello','elo','abc')   =>   habbc

                          e  => a
                          l   => b
                         o   => c 

 => translate function can be used to encrypt data i.e. converting plain text to cipher text 

    display   ENAME   SAL   ?  encrypt salaries ? 

   SELECT ENAME,
                  TRANSLATE(SAL,'0123456789.','$bT*g&*%^@#') AS SAL
  FROM EMP 

      JONES  2975.00       T@%&#$$
                 
  =>  remove all special chars from   '@#he*&ll%$o^!'  ? 

       
     SELECT 
        REPLACE( TRANSLATE('@#he*&ll%$o^!','@#*&%$^!','********'),'*','')  => hello
                           -----------------------------------------------------------------------
                                  **he**ll**o**

 CHARINDEX :- 
 ---------------------

  => returns position of a character in a string

         CHARINDEX(char,string,[start]) 

    SELECT CHARINDEX('O','HELLO WELCOME')   => 5
    SELECT CHARINDEX('O','HELLO WELCOME',6)  =>  11
    SELECT CHARINDEX('O','HELLO WELCOME',12)  => 0
    SELECT CHARINDEX('E','HELLO WELCOME',12)   => 13 

 scenario :- 

 CUST
 CID	CNAME
 10	sachin tendulkar
 11	virat kohli


 => display   CID      FNAME         LNAME    ? 
                    10         sachin          tendulkar

          SUBSTRING(STRING,START,LENGTH)

   firstname   =   SUBSTRING(CNAME,1,CHARINDEX(' ',CNAME)-1)

   lastname  =    SUBSTRING(CNAME,CHARINDEX(' ',CNAME)+1,LEN(CNAME))

  SELECT CID,
    SUBSTRING(CNAME,1,CHARINDEX(' ',CNAME)-1) AS FNAME,
    SUBSTRING(CNAME,CHARINDEX(' ',CNAME)+1,LEN(CNAME)) AS LNAME
  FROM CUST 
                 
 Numeric Functions :- 
 -------------------------------

 1 power() :- returns power

   power(3,2)  => 9

2 sqrt() :- returns square root

  sqrt(16) => 4

3 square() :- returns square of a number

   square(5) => 25

4  sign() :- to check whether given number is positive or negative

   sign(10)    => 1
   sign(-10)  => -1
   sign(0)     =>  0

 rounding numbers :- 
 ----------------------------

  ROUND
  CEILING
  FLOOR

     38.4567894   => 38
                                38.45
                                38.4567

 ROUND :- 
 ---------------

   => rounds number to integer or to decimal places  based on avg.

         ROUND(number,decimal places) 

  ex :- 

    SELECT ROUND(38.4567,0)     =>   38

      38-----------------------------38.5-----------------------------------39


      number < avg  => rounded to lowest
      number >= avg  => rounded to highest 

     SELECT ROUND(38.5567,0)        =>   39 

     SELECT ROUND(38.5567,2)        =>   38.56

    SELECT ROUND(38.5547,2)         =>   38.55

     SELECT ROUND(38.5547,3)        =>  38.555

   
    SELECT ROUND(386,-2)              =>   400     (rounded to hundreds)


    300----------------------350------------------------------400

    
    SELECT ROUND(386,-1)              =>   390

   
  380------------------------385----------------------------------390 

   
  SELECT ROUND(386,-3)              =>  0

  0----------------------------------500--------------------------------1000
  

SELECT ROUND(4567,-1),ROUND(4567,-2),ROUND(4567,-3)  

  o/p :-  4570     4600    5000

=> round employee salaries to hundreds  in table ?

     UPDATE EMP SET SAL = ROUND(SAL,-2) 

06-DEC-23 

CEILING() :- 
----------------

  => rounds number always to highest integer

           CEILING(number)

  SELECT CEILING(3.1)       =>  4 

       3----------------------------------4

FLOOR() :-
----------------

  => rounds number always to lowest integer

            FLOOR(number) 

 SELET FLOOR(3.9)     =>     3 

CONVERSION FUNCTIONS :- 
--------------------------------------------

 => these functions are used to convert one datatype to another datatype 
 => sql server provided two conversion functions 

 1 CAST
 2 CONVERT 

 CAST :- 
 ------------

        CAST(value AS TARGET-TYPE) 

 EX :- 

   SELECT CAST(10.5  AS INT)      =>  10 

 => display  smith earns    800 
                    allen  earns   1600  ? 
  
      +     => string concatenation

     'A' + 'B'     =>  AB

    SELECT ename + ' earns ' + sal FROM emp  => ERROR 

   SELECT ename + ' earns '  + CAST(sal AS VARCHAR)
   FROM emp 

 => display  smith joined on 1980-12-17 as clerk   ?

    SELECT ename + ' joined on '  + CAST(hiredate AS VARCHAR) + ' as '  + job
    FROM emp 
 
CONVERT :- 
-----------------

     CONVERT(TARGET-TYPE,VALUE) 

EX :- 

 SELECT CONVERT(INT,10.5)    =>    10 

 difference between cast & convert ? 

 1  using convert function we can display dates in different formats 
     but not possible by using cast function

 2 using convert function we can display money in different styles
    but not possible by using cast function

 Displaying date in different styles :- 
 -----------------------------------------------
 
 => to display dates in different styles/formats first convert date to char type

         CONVERT(VARCHAR,DATE VALUE,STYLE-NUMBER)

 EX :- 

  SELECT CONVERT(VARCHAR,GETDATE(),101)   => 12/06/2023
  				
				       104    =>  06.12.2023

				       112    =>  20231206

				       114    =>  12:09:46:093

 display ENAME   HIREDATE  ? 
 display hiredate in dd.mm.yyyy format ? 

 SELECT ENAME,CONVERT(VARCHAR,HIREDATE,104) AS HIREDATE
 FROM EMP 

 Displaying money different styles :- 
 ---------------------------------------------
 
  => to display money in different styles first convert money to char type
 
               CONVERT(VARCHAR,MONEY,STYLE-NUMBER)

 0    => display 2 digits after decimal
 1    => display number with thousand seperator
 2    => display 4 digits after decimal 


EX :- 

SELECT CONVERT(VARCHAR,CAST(5000 AS MONEY),0) => 5000.00
SELECT CONVERT(VARCHAR,CAST(5000 AS MONEY),1) => 5,000.00
SELECT CONVERT(VARCHAR,CAST(5000 AS MONEY),2) => 5000.0000

display  ENAME   SAL   ?  display salaries with thousand seperator ? 

 SELECT ENAME,CONVERT(VARCHAR,SAL,1) AS SAL FROM EMP 
 
 Special Functions :- 
 ----------------------------

 ISNULL() :- 
 ------------

  => used to convert null values 

          ISNULL(arg1,arg2) 

        if arg1 = null returns arg2
        if arg1 <> null returns arg1 only 

    SELECT ISNULL(100,200)                =>   100
    SELECT ISNULL(NULL,200)            =>    200

  => display  ENAME  SAL    COMM   TOTSAL    ? 

                  TOTSAL = SAL + COMM 

     SELECT ENAME,SAL,COMM,SAL+COMM AS TOTSAL FROM EMP 

    smith   800    null      null
    allen   1600   300     1900

   SELECT ENAME,SAL,COMM,SAL+ISNULL(COMM,0) AS TOTSAL FROM EMP 

    smith   800   null      800
    allen   1600  300     1900

   Display  ENAME  SAL    COMM    ? 
   
   if comm = null display NO COMM ?

   SELECT ENAME,SAL,
       ISNULL(CAST(COMM AS VARCHAR),'NO COMM') AS COMM  
  FROM EMP 
  
  











